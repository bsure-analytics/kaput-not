---
name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: ["**"]
    tags: ["v*.*.*"]  # Publish semver tags as releases
  schedule:
    - cron: "28 4 * * *"  # Daily build to catch dependency issues

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run tests
        run: make test

      - name: Run linters
        run: make lint

      - name: Build binary
        run: make build

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}

  helm:
    name: Package and Push Helm Chart
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: "3.14.0"

      - name: Determine chart version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Extract version from tag (v1.2.3 -> 1.2.3)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            # Use version from Chart.yaml for non-release builds
            VERSION=$(grep '^version:' charts/kaput-not/Chart.yaml | awk '{print $2}')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Chart version for release
        if: steps.version.outputs.is_release == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          sed -i "s/^version:.*/version: $VERSION/" charts/kaput-not/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"$VERSION\"/" charts/kaput-not/Chart.yaml
          echo "Updated Chart.yaml to version $VERSION"

      - name: Lint Helm chart
        run: helm lint charts/kaput-not

      - name: Package Helm chart
        run: |
          helm package charts/kaput-not -d dist/

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

      - name: Push Helm chart to GHCR
        if: github.event_name != 'pull_request'
        run: |
          CHART_VERSION="${{ steps.version.outputs.version }}"
          helm push dist/kaput-not-${CHART_VERSION}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}
